// Mocks generated by Mockito 5.4.5 from annotations
// in movies_module/test/domain/mocks/repositories_mock_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:movies_module/domain/entities/actor.dart' as _i6;
import 'package:movies_module/domain/entities/movie.dart' as _i8;
import 'package:movies_module/domain/repositories/actors_repository.dart'
    as _i3;
import 'package:movies_module/domain/repositories/favorites_repository.dart'
    as _i9;
import 'package:movies_module/domain/repositories/movie_repository.dart' as _i7;
import 'package:shared_module/data/errors/failures.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ActorsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockActorsRepository extends _i1.Mock implements _i3.ActorsRepository {
  MockActorsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Actor>>> getActorsByMovie(
          int? movieId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getActorsByMovie,
          [movieId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<_i6.Actor>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.Actor>>(
          this,
          Invocation.method(
            #getActorsByMovie,
            [movieId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Actor>>>);
}

/// A class which mocks [MovieRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRepository extends _i1.Mock implements _i7.MovieRepository {
  MockMovieRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i8.Movie>>> getMovies(
    _i7.ListType? listType,
    int? page,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovies,
          [
            listType,
            page,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<_i8.Movie>>>.value(
            _FakeEither_0<_i5.Failure, List<_i8.Movie>>(
          this,
          Invocation.method(
            #getMovies,
            [
              listType,
              page,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i8.Movie>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i8.Movie>>> searchMovies(
          String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchMovies,
          [query],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<_i8.Movie>>>.value(
            _FakeEither_0<_i5.Failure, List<_i8.Movie>>(
          this,
          Invocation.method(
            #searchMovies,
            [query],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i8.Movie>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i8.Movie>> getMovieDetails(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovieDetails,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i8.Movie>>.value(
            _FakeEither_0<_i5.Failure, _i8.Movie>(
          this,
          Invocation.method(
            #getMovieDetails,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i8.Movie>>);
}

/// A class which mocks [FavoritesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFavoritesRepository extends _i1.Mock
    implements _i9.FavoritesRepository {
  MockFavoritesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> toggleFavorite(_i8.Movie? movie) =>
      (super.noSuchMethod(
        Invocation.method(
          #toggleFavorite,
          [movie],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #toggleFavorite,
            [movie],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> isMovieFavorite(int? movieId) =>
      (super.noSuchMethod(
        Invocation.method(
          #isMovieFavorite,
          [movieId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #isMovieFavorite,
            [movieId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i8.Movie>>> getFavorites() =>
      (super.noSuchMethod(
        Invocation.method(
          #getFavorites,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<_i8.Movie>>>.value(
            _FakeEither_0<_i5.Failure, List<_i8.Movie>>(
          this,
          Invocation.method(
            #getFavorites,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i8.Movie>>>);
}
